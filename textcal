#!/usr/bin/env python
# coding:utf-8

"""Textcal

A plain text calendar generator.
"""

__author__ = "Edward Larkey <edwlarkey@gmail.com>"
__copyright__ = "Copyright (c) 2014-2015 Edward Larkey"
__license__ = "GPL Version 3"
__version__ = "0.2.0"

import os
import argparse
import subprocess
import calendar
import datetime

class Textcal(object):
    """Textcal"""

    def __init__(self):
        """Main execution path"""
        self.textcal_path = ''
        self.args = {}

        # defaults
        self.create = False
        self.open = False
        self.year = ''
        # Years start in January
        self.month = 1
        self.date = datetime.date.today().strftime('%Y-%m-%d')

        self.read_environment()
        self.parse_cli()

        if self.create:
            # for each month of the year, print calendar and then list of dates.
            while self.month <= 12:
                self.print_calendar()
                self.print_days()
                self.month += 1
        elif self.open:
            self.open_calendar()

    def read_environment(self):
        """Reads the settings from environment variables"""
        # Calendar location
        if os.getenv('TEXTCAL'):
            self.textcal_path = os.getenv('TEXTCAL')

    def parse_cli(self):
        """Command line argument processing"""
        parser = argparse.ArgumentParser(description="A plain text calendar")

        # Version information
        parser.add_argument('--version', action='version',
                            version="%(prog)s: " + __version__)

        commands = parser.add_subparsers(help='Commands', dest='command')

        # Create command and arguments
        create = commands.add_parser('create', help='Create new calendar')
        create.add_argument('-y', '--year', required=True, type=int,
                            help="""YEAR for new calendar""")

        # open command and arguments
        open = commands.add_parser('open', help='Open calendar at date')
        open.add_argument('-d', '--date', help="""DATE to open. e.g. 02-24""")

        args = parser.parse_args()

        if args.command == 'create':
            self.create = True
            self.year = args.year
        elif args.command == 'open':
            self.open = True
            if args.date:
                self.date = args.date

    def print_calendar(self):
        """Prints a text calendar of the year and month supplied."""

        cal = calendar.month(self.year, self.month)
        print(cal)

    def print_days(self):
        """Prints each day in a month in the format:
        YYYY-MM-DD  A[:1]  :
        """
        day = 1
        last_day = calendar.monthrange(self.year, self.month)[1]

        while day <= last_day:
            # date
            date = datetime.date(self.year, self.month, day)

            # string date
            strdate = date.strftime('%Y-%m-%d')

            # full day of week
            dow = date.strftime('%A')

            # convert day of week(dow) into single character dayofweek
            if dow == "Monday":
                dayofweek = 'M'
            elif dow == "Tuesday":
                dayofweek = 'T'
            elif dow == "Wednesday":
                dayofweek = 'W'
            elif dow == "Thursday":
                dayofweek = 'R'
            elif dow == "Friday":
                dayofweek = 'F'
            else:
                dayofweek = 'S'

            # if it is the beginning of the week, print a new line first.
            if dayofweek == 'M':
                print("")
                print("%s  %s  :" % (strdate, dayofweek))
            else:
                print("%s  %s  :" % (strdate, dayofweek))

            day += 1

        # print ^^ at the end of the month (used for gawk printing stop pattern)
        print("^^\n")

    def open_calendar(self):
        """Open calendar to specified date"""
        search_string = "+/%s" % (self.date)
        subprocess.call(["vim", search_string, self.textcal_path])

Textcal()
